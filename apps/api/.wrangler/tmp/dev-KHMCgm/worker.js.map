{
  "version": 3,
  "sources": ["../bundle-s9MFna/checked-fetch.js", "../../../src/handlers/health.js", "../../../src/cloudflare/models/d1Database.js", "../../../src/handlers/accounts.js", "../../../src/cloudflare/services/kvCacheService.js", "../../../src/cloudflare/services/cloudflareEnhancedPriceService.js", "../../../src/handlers/portfolio.js", "../../../src/worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-s9MFna/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-s9MFna/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/luojiaxing/Code/cc-vision/apps/api/.wrangler/tmp/dev-KHMCgm",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Health check handler for Cloudflare Workers\n\nexport async function healthHandler(request, env) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  // Only allow GET requests\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({ error: 'Method not allowed' }),\n      {\n        status: 405,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n  }\n\n  // Return health status\n  return new Response(\n    JSON.stringify({\n      status: 'OK (Cloudflare Workers)',\n      timestamp: new Date().toISOString(),\n      message: 'Portfolio API is running on Cloudflare Workers',\n      region: request.cf?.colo || 'unknown',\n      country: request.cf?.country || 'unknown'\n    }),\n    {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders,\n      },\n    }\n  );\n}\n", "// Cloudflare D1 Database Model (replaces PostgreSQL)\n\nexport class D1Database {\n  constructor(db) {\n    this.db = db;\n  }\n\n  // Initialize database tables\n  async initializeTables() {\n    const statements = [\n      // Accounts table\n      `CREATE TABLE IF NOT EXISTS accounts (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        account_type TEXT NOT NULL,\n        currency TEXT DEFAULT 'USD',\n        is_default INTEGER DEFAULT 0,\n        is_active INTEGER DEFAULT 1,\n        created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n        updated_at TEXT DEFAULT CURRENT_TIMESTAMP\n      )`,\n      \n      // Holdings table\n      `CREATE TABLE IF NOT EXISTS holdings (\n        id TEXT PRIMARY KEY,\n        account_id TEXT NOT NULL,\n        symbol TEXT NOT NULL,\n        quantity REAL NOT NULL,\n        average_price REAL NOT NULL,\n        asset_type TEXT NOT NULL,\n        created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n        updated_at TEXT DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (account_id) REFERENCES accounts (id)\n      )`,\n\n      // Create indexes for better performance\n      `CREATE INDEX IF NOT EXISTS idx_holdings_account_id ON holdings(account_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_holdings_symbol ON holdings(symbol)`,\n      `CREATE INDEX IF NOT EXISTS idx_accounts_default ON accounts(is_default)`\n    ];\n\n    try {\n      for (const sql of statements) {\n        await this.db.prepare(sql).run();\n      }\n      console.log('\u2705 D1 Database tables initialized successfully');\n    } catch (error) {\n      console.error('\u274C Error initializing D1 tables:', error);\n      throw error;\n    }\n  }\n\n  // Account operations\n  async createAccount(account) {\n    const sql = `\n      INSERT INTO accounts (id, name, account_type, currency, is_default, is_active)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(\n        account.id,\n        account.name,\n        account.accountType,\n        account.currency || 'USD',\n        account.isDefault ? 1 : 0,\n        account.isActive ? 1 : 0\n      ).run();\n      \n      return result.success;\n    } catch (error) {\n      console.error('Error creating account:', error);\n      throw error;\n    }\n  }\n\n  async getAccounts() {\n    const sql = `\n      SELECT id, name, account_type, currency, is_default, is_active, created_at, updated_at\n      FROM accounts \n      WHERE is_active = 1\n      ORDER BY is_default DESC, name ASC\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).all();\n      return result.results.map(account => ({\n        id: account.id,\n        name: account.name,\n        accountType: account.account_type,\n        currency: account.currency,\n        isDefault: account.is_default === 1,\n        isActive: account.is_active === 1,\n        createdAt: account.created_at,\n        updatedAt: account.updated_at\n      }));\n    } catch (error) {\n      console.error('Error getting accounts:', error);\n      throw error;\n    }\n  }\n\n  async getAccountById(id) {\n    const sql = `\n      SELECT id, name, account_type, currency, is_default, is_active, created_at, updated_at\n      FROM accounts \n      WHERE id = ? AND is_active = 1\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(id).first();\n      \n      if (!result) return null;\n      \n      return {\n        id: result.id,\n        name: result.name,\n        accountType: result.account_type,\n        currency: result.currency,\n        isDefault: result.is_default === 1,\n        isActive: result.is_active === 1,\n        createdAt: result.created_at,\n        updatedAt: result.updated_at\n      };\n    } catch (error) {\n      console.error('Error getting account by ID:', error);\n      throw error;\n    }\n  }\n\n  // Holdings operations\n  async createHolding(holding) {\n    const sql = `\n      INSERT INTO holdings (id, account_id, symbol, quantity, average_price, asset_type)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(\n        holding.id,\n        holding.accountId,\n        holding.symbol.toUpperCase(),\n        holding.quantity,\n        holding.averagePrice,\n        holding.assetType\n      ).run();\n      \n      return result.success;\n    } catch (error) {\n      console.error('Error creating holding:', error);\n      throw error;\n    }\n  }\n\n  async getHoldingsByAccountId(accountId) {\n    const sql = `\n      SELECT id, account_id, symbol, quantity, average_price, asset_type, created_at, updated_at\n      FROM holdings \n      WHERE account_id = ?\n      ORDER BY symbol ASC\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(accountId).all();\n      return result.results.map(holding => ({\n        id: holding.id,\n        accountId: holding.account_id,\n        symbol: holding.symbol,\n        quantity: holding.quantity,\n        averagePrice: holding.average_price,\n        assetType: holding.asset_type,\n        createdAt: holding.created_at,\n        updatedAt: holding.updated_at\n      }));\n    } catch (error) {\n      console.error('Error getting holdings by account ID:', error);\n      throw error;\n    }\n  }\n\n  async getAllHoldings() {\n    const sql = `\n      SELECT h.id, h.account_id, h.symbol, h.quantity, h.average_price, h.asset_type, \n             h.created_at, h.updated_at, a.name as account_name\n      FROM holdings h\n      JOIN accounts a ON h.account_id = a.id\n      WHERE a.is_active = 1\n      ORDER BY a.name ASC, h.symbol ASC\n    `;\n    \n    try {\n      const result = await this.db.prepare(sql).all();\n      return result.results.map(holding => ({\n        id: holding.id,\n        accountId: holding.account_id,\n        accountName: holding.account_name,\n        symbol: holding.symbol,\n        quantity: holding.quantity,\n        averagePrice: holding.average_price,\n        assetType: holding.asset_type,\n        createdAt: holding.created_at,\n        updatedAt: holding.updated_at\n      }));\n    } catch (error) {\n      console.error('Error getting all holdings:', error);\n      throw error;\n    }\n  }\n\n  async updateHolding(id, updates) {\n    const fields = [];\n    const values = [];\n    \n    if (updates.quantity !== undefined) {\n      fields.push('quantity = ?');\n      values.push(updates.quantity);\n    }\n    if (updates.averagePrice !== undefined) {\n      fields.push('average_price = ?');\n      values.push(updates.averagePrice);\n    }\n    \n    if (fields.length === 0) return false;\n    \n    fields.push('updated_at = CURRENT_TIMESTAMP');\n    values.push(id);\n    \n    const sql = `UPDATE holdings SET ${fields.join(', ')} WHERE id = ?`;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(...values).run();\n      return result.success;\n    } catch (error) {\n      console.error('Error updating holding:', error);\n      throw error;\n    }\n  }\n\n  async deleteHolding(id) {\n    const sql = `DELETE FROM holdings WHERE id = ?`;\n    \n    try {\n      const result = await this.db.prepare(sql).bind(id).run();\n      return result.success;\n    } catch (error) {\n      console.error('Error deleting holding:', error);\n      throw error;\n    }\n  }\n\n  // Utility methods\n  async ensureDefaultAccount() {\n    const accounts = await this.getAccounts();\n    const defaultAccount = accounts.find(acc => acc.isDefault);\n    \n    if (!defaultAccount) {\n      const defaultAccountData = {\n        id: 'default-account-' + Date.now(),\n        name: 'Default Account',\n        accountType: 'SECURITIES',\n        currency: 'USD',\n        isDefault: true,\n        isActive: true\n      };\n      \n      await this.createAccount(defaultAccountData);\n      console.log('\u2705 Default account created');\n      return defaultAccountData;\n    }\n    \n    return defaultAccount;\n  }\n}\n", "// Accounts handler for Cloudflare Workers (using D1 database)\n\nimport { D1Database } from '../cloudflare/models/d1Database.js';\n\nexport async function accountsHandler(request, env) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  try {\n    // Initialize D1 database\n    const database = new D1Database(env.DB);\n    \n    if (request.method === 'GET') {\n      // Get all accounts from D1\n      const accounts = await database.getAccounts();\n      \n      return new Response(\n        JSON.stringify({\n          success: true,\n          data: accounts,\n          timestamp: new Date().toISOString(),\n          source: 'Cloudflare D1'\n        }),\n        {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders,\n          },\n        }\n      );\n    }\n    \n    if (request.method === 'POST') {\n      // Create new account\n      const accountData = await request.json();\n      \n      // Validate required fields\n      if (!accountData.name || !accountData.accountType) {\n        return new Response(\n          JSON.stringify({ \n            error: 'Missing required fields: name, accountType' \n          }),\n          {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      }\n      \n      // Generate ID if not provided\n      if (!accountData.id) {\n        accountData.id = `account-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      // Set defaults\n      accountData.currency = accountData.currency || 'USD';\n      accountData.isDefault = accountData.isDefault || false;\n      accountData.isActive = accountData.isActive !== false; // Default to true\n      \n      const success = await database.createAccount(accountData);\n      \n      if (success) {\n        const createdAccount = await database.getAccountById(accountData.id);\n        return new Response(\n          JSON.stringify({\n            success: true,\n            data: createdAccount,\n            timestamp: new Date().toISOString(),\n            source: 'Cloudflare D1'\n          }),\n          {\n            status: 201,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      } else {\n        return new Response(\n          JSON.stringify({ error: 'Failed to create account' }),\n          {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      }\n    }\n\n    // Method not allowed\n    return new Response(\n      JSON.stringify({ error: 'Method not allowed' }),\n      {\n        status: 405,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n\n  } catch (error) {\n    console.error('Error in accounts handler:', error);\n    return new Response(\n      JSON.stringify({ \n        error: 'Internal server error',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n  }\n}\n", "// Cloudflare KV Cache Service (replaces Redis)\n\nexport class KVCacheService {\n  constructor(kv) {\n    this.kv = kv;\n  }\n\n  // Price caching (replaces Redis price cache)\n  async getCachedPrice(symbol) {\n    const cacheKey = `price:${symbol.toUpperCase()}`;\n    \n    try {\n      const cached = await this.kv.get(cacheKey, 'json');\n      if (cached) {\n        // Convert timestamp back to Date object\n        cached.lastUpdated = new Date(cached.lastUpdated);\n        return cached;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting cached price:', error);\n      return null;\n    }\n  }\n\n  async cachePrice(symbol, price, ttlSeconds = 300) { // Default 5 minutes\n    const cacheKey = `price:${symbol.toUpperCase()}`;\n    \n    try {\n      await this.kv.put(\n        cacheKey,\n        JSON.stringify(price),\n        { expirationTtl: ttlSeconds }\n      );\n      return true;\n    } catch (error) {\n      console.error('Error caching price:', error);\n      return false;\n    }\n  }\n\n  // Historical prices caching\n  async getCachedHistoricalPrices(symbol, interval, range) {\n    const cacheKey = `historical:${symbol.toUpperCase()}:${interval}:${range}`;\n    \n    try {\n      const cached = await this.kv.get(cacheKey, 'json');\n      return cached || [];\n    } catch (error) {\n      console.error('Error getting cached historical prices:', error);\n      return [];\n    }\n  }\n\n  async cacheHistoricalPrices(symbol, interval, range, prices, ttlSeconds = 3600) { // Default 1 hour\n    const cacheKey = `historical:${symbol.toUpperCase()}:${interval}:${range}`;\n    \n    try {\n      await this.kv.put(\n        cacheKey,\n        JSON.stringify(prices),\n        { expirationTtl: ttlSeconds }\n      );\n      return true;\n    } catch (error) {\n      console.error('Error caching historical prices:', error);\n      return false;\n    }\n  }\n\n  // Search results caching\n  async getCachedSearchResults(query) {\n    const cacheKey = `search:${query.toLowerCase().replace(/[^a-z0-9]/g, '')}`;\n    \n    try {\n      const cached = await this.kv.get(cacheKey, 'json');\n      return cached || [];\n    } catch (error) {\n      console.error('Error getting cached search results:', error);\n      return [];\n    }\n  }\n\n  async cacheSearchResults(query, results, ttlSeconds = 1800) { // Default 30 minutes\n    const cacheKey = `search:${query.toLowerCase().replace(/[^a-z0-9]/g, '')}`;\n    \n    try {\n      await this.kv.put(\n        cacheKey,\n        JSON.stringify(results),\n        { expirationTtl: ttlSeconds }\n      );\n      return true;\n    } catch (error) {\n      console.error('Error caching search results:', error);\n      return false;\n    }\n  }\n\n  // Multiple prices caching (batch operations)\n  async getCachedPrices(symbols) {\n    const results = {};\n    \n    try {\n      // KV doesn't have native batch get, so we do individual gets\n      const promises = symbols.map(async (symbol) => {\n        const price = await this.getCachedPrice(symbol);\n        if (price) {\n          results[symbol.toUpperCase()] = price;\n        }\n      });\n      \n      await Promise.all(promises);\n      return results;\n    } catch (error) {\n      console.error('Error getting cached prices:', error);\n      return {};\n    }\n  }\n\n  async cachePrices(pricesMap, ttlSeconds = 300) {\n    try {\n      const promises = Object.entries(pricesMap).map(([symbol, price]) => \n        this.cachePrice(symbol, price, ttlSeconds)\n      );\n      \n      await Promise.all(promises);\n      return true;\n    } catch (error) {\n      console.error('Error caching prices:', error);\n      return false;\n    }\n  }\n\n  // Cache management\n  async clearCache() {\n    try {\n      // KV doesn't have keys() or clear() like Redis\n      // In production, you might want to implement a key tracking system\n      // For now, we'll just log that cache clearing is not fully supported\n      console.log('\u26A0\uFE0F KV cache clearing is limited. Consider setting shorter TTLs or using namespace versioning.');\n      return true;\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      return false;\n    }\n  }\n\n  // Get cache statistics (limited compared to Redis)\n  async getCacheStats() {\n    try {\n      // KV doesn't provide detailed stats like Redis\n      // This is a placeholder for basic cache info\n      return {\n        provider: 'Cloudflare KV',\n        status: 'active',\n        timestamp: new Date().toISOString(),\n        note: 'Detailed stats not available in KV'\n      };\n    } catch (error) {\n      console.error('Error getting cache stats:', error);\n      return {\n        provider: 'Cloudflare KV',\n        status: 'error',\n        error: error.message\n      };\n    }\n  }\n\n  // Generic cache methods\n  async get(key) {\n    try {\n      return await this.kv.get(key, 'json');\n    } catch (error) {\n      console.error(`Error getting key ${key}:`, error);\n      return null;\n    }\n  }\n\n  async set(key, value, ttlSeconds = 3600) {\n    try {\n      await this.kv.put(\n        key,\n        JSON.stringify(value),\n        ttlSeconds ? { expirationTtl: ttlSeconds } : {}\n      );\n      return true;\n    } catch (error) {\n      console.error(`Error setting key ${key}:`, error);\n      return false;\n    }\n  }\n\n  async delete(key) {\n    try {\n      await this.kv.delete(key);\n      return true;\n    } catch (error) {\n      console.error(`Error deleting key ${key}:`, error);\n      return false;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const testKey = 'health_check_' + Date.now();\n      const testValue = { timestamp: new Date().toISOString() };\n      \n      // Test write\n      await this.set(testKey, testValue, 60); // 1 minute TTL\n      \n      // Test read\n      const retrieved = await this.get(testKey);\n      \n      // Test delete\n      await this.delete(testKey);\n      \n      return {\n        status: 'healthy',\n        writeTest: true,\n        readTest: !!retrieved,\n        deleteTest: true,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n}\n", "// Enhanced Price Service for Cloudflare Workers (using KV instead of Redis)\n\nimport { KVCacheService } from './kvCacheService.js';\n\nexport class CloudflareEnhancedPriceService {\n  constructor(kv, env) {\n    this.cache = new KVCacheService(kv);\n    this.env = env;\n    \n    // API Keys from environment\n    this.alphaVantageApiKey = env.ALPHA_VANTAGE_API_KEY;\n    this.coinGeckoApiKey = env.COINGECKO_API_KEY;\n    \n    // Rate limiting\n    this.lastAlphaVantageCall = 0;\n    this.lastCoinGeckoCall = 0;\n    this.alphaVantageDelay = 12000; // 12 seconds between calls (5 calls/minute)\n    this.coinGeckoDelay = 1000; // 1 second between calls\n  }\n\n  // Get current price for a single asset\n  async getCurrentPrice(symbol, assetType = 'STOCK') {\n    const cacheKey = `price:${symbol.toUpperCase()}`;\n    \n    try {\n      // Check cache first\n      const cached = await this.cache.getCachedPrice(symbol);\n      if (cached) {\n        console.log(`\uD83D\uDCCB Cache hit for ${symbol}`);\n        return cached;\n      }\n\n      console.log(`\uD83C\uDF10 Fetching fresh price for ${symbol}`);\n      \n      // Fetch from appropriate provider\n      let price;\n      if (assetType === 'CRYPTO') {\n        price = await this.fetchCryptoPrice(symbol);\n      } else {\n        price = await this.fetchStockPrice(symbol);\n      }\n\n      if (price) {\n        // Cache for 5 minutes\n        await this.cache.cachePrice(symbol, price, 300);\n        return price;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(`Error getting price for ${symbol}:`, error);\n      return null;\n    }\n  }\n\n  // Get current prices for multiple assets\n  async getCurrentPrices(symbols) {\n    try {\n      // Check cache for all symbols first\n      const cachedPrices = await this.cache.getCachedPrices(symbols);\n      const uncachedSymbols = symbols.filter(symbol => !cachedPrices[symbol.toUpperCase()]);\n\n      console.log(`\uD83D\uDCCB Cache hits: ${Object.keys(cachedPrices).length}, Cache misses: ${uncachedSymbols.length}`);\n\n      // Fetch uncached prices\n      const freshPrices = {};\n      if (uncachedSymbols.length > 0) {\n        const fetchPromises = uncachedSymbols.map(async (symbol) => {\n          // Determine asset type (you might want to store this info)\n          const assetType = symbol.includes('BTC') || symbol.includes('ETH') || symbol.includes('USDT') ? 'CRYPTO' : 'STOCK';\n          const price = await this.getCurrentPrice(symbol, assetType);\n          if (price) {\n            freshPrices[symbol.toUpperCase()] = price;\n          }\n        });\n\n        await Promise.all(fetchPromises);\n      }\n\n      // Combine cached and fresh prices\n      return { ...cachedPrices, ...freshPrices };\n    } catch (error) {\n      console.error('Error getting current prices:', error);\n      return {};\n    }\n  }\n\n  // Get historical prices\n  async getHistoricalPrices(symbol, interval = '1day', range = '30days') {\n    try {\n      // Check cache first\n      const cached = await this.cache.getCachedHistoricalPrices(symbol, interval, range);\n      if (cached.length > 0) {\n        console.log(`\uD83D\uDCCB Historical cache hit for ${symbol}`);\n        return cached;\n      }\n\n      console.log(`\uD83C\uDF10 Fetching fresh historical data for ${symbol}`);\n      \n      // Fetch from API (simplified for demo)\n      const prices = await this.fetchHistoricalPrices(symbol, interval, range);\n      \n      if (prices.length > 0) {\n        // Cache for 1 hour\n        await this.cache.cacheHistoricalPrices(symbol, interval, range, prices, 3600);\n      }\n\n      return prices;\n    } catch (error) {\n      console.error(`Error getting historical prices for ${symbol}:`, error);\n      return [];\n    }\n  }\n\n  // Search for assets\n  async searchAssets(query) {\n    try {\n      // Check cache first\n      const cached = await this.cache.getCachedSearchResults(query);\n      if (cached.length > 0) {\n        console.log(`\uD83D\uDCCB Search cache hit for \"${query}\"`);\n        return cached;\n      }\n\n      console.log(`\uD83C\uDF10 Fetching fresh search results for \"${query}\"`);\n      \n      // Fetch from API\n      const results = await this.fetchSearchResults(query);\n      \n      if (results.length > 0) {\n        // Cache for 30 minutes\n        await this.cache.cacheSearchResults(query, results, 1800);\n      }\n\n      return results;\n    } catch (error) {\n      console.error(`Error searching for \"${query}\":`, error);\n      return [];\n    }\n  }\n\n  // Private methods for fetching data\n\n  async fetchStockPrice(symbol) {\n    try {\n      await this.respectRateLimit('alphavantage');\n      \n      if (!this.alphaVantageApiKey) {\n        console.warn('Alpha Vantage API key not provided');\n        return this.getMockStockPrice(symbol);\n      }\n\n      const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.alphaVantageApiKey}`;\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data['Global Quote'] && data['Global Quote']['05. price']) {\n        const quote = data['Global Quote'];\n        return {\n          symbol: symbol.toUpperCase(),\n          price: parseFloat(quote['05. price']),\n          change: parseFloat(quote['09. change']),\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')),\n          volume: parseInt(quote['06. volume']),\n          lastUpdated: new Date(),\n          source: 'Alpha Vantage',\n          assetType: 'STOCK'\n        };\n      }\n\n      return this.getMockStockPrice(symbol);\n    } catch (error) {\n      console.error(`Error fetching stock price for ${symbol}:`, error);\n      return this.getMockStockPrice(symbol);\n    }\n  }\n\n  async fetchCryptoPrice(symbol) {\n    try {\n      await this.respectRateLimit('coingecko');\n      \n      // Map common symbols to CoinGecko IDs\n      const symbolMap = {\n        'BTC': 'bitcoin',\n        'ETH': 'ethereum',\n        'USDT': 'tether',\n        'BNB': 'binancecoin',\n        'SOL': 'solana',\n        'ADA': 'cardano',\n        'DOT': 'polkadot'\n      };\n\n      const coinId = symbolMap[symbol.toUpperCase()] || symbol.toLowerCase();\n      const url = `https://api.coingecko.com/api/v3/simple/price?ids=${coinId}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true`;\n      \n      const headers = {};\n      if (this.coinGeckoApiKey) {\n        headers['x-cg-demo-api-key'] = this.coinGeckoApiKey;\n      }\n\n      const response = await fetch(url, { headers });\n      const data = await response.json();\n\n      if (data[coinId]) {\n        const coinData = data[coinId];\n        return {\n          symbol: symbol.toUpperCase(),\n          price: coinData.usd,\n          change: coinData.usd_24h_change || 0,\n          changePercent: coinData.usd_24h_change || 0,\n          volume: coinData.usd_24h_vol || 0,\n          lastUpdated: new Date(),\n          source: 'CoinGecko',\n          assetType: 'CRYPTO'\n        };\n      }\n\n      return this.getMockCryptoPrice(symbol);\n    } catch (error) {\n      console.error(`Error fetching crypto price for ${symbol}:`, error);\n      return this.getMockCryptoPrice(symbol);\n    }\n  }\n\n  async fetchHistoricalPrices(symbol, interval, range) {\n    // Simplified historical data fetching\n    // In production, you'd call the appropriate API based on asset type\n    try {\n      const days = range === '30days' ? 30 : 7;\n      const prices = [];\n      const basePrice = 100; // Mock base price\n      \n      for (let i = days; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        \n        // Generate mock price with some variation\n        const variation = (Math.random() - 0.5) * 0.1; // \u00B15% variation\n        const price = basePrice * (1 + variation);\n        \n        prices.push({\n          date: date.toISOString().split('T')[0],\n          open: price * 0.99,\n          high: price * 1.02,\n          low: price * 0.98,\n          close: price,\n          volume: Math.floor(Math.random() * 1000000)\n        });\n      }\n      \n      return prices;\n    } catch (error) {\n      console.error(`Error fetching historical prices for ${symbol}:`, error);\n      return [];\n    }\n  }\n\n  async fetchSearchResults(query) {\n    // Simplified search - in production you'd call real APIs\n    const mockResults = [\n      {\n        symbol: 'AAPL',\n        name: 'Apple Inc.',\n        type: 'STOCK',\n        exchange: 'NASDAQ'\n      },\n      {\n        symbol: 'BTC',\n        name: 'Bitcoin',\n        type: 'CRYPTO',\n        exchange: 'Cryptocurrency'\n      }\n    ].filter(item => \n      item.symbol.toLowerCase().includes(query.toLowerCase()) ||\n      item.name.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return mockResults;\n  }\n\n  // Rate limiting helpers\n  async respectRateLimit(provider) {\n    const now = Date.now();\n    \n    if (provider === 'alphavantage') {\n      const timeSinceLastCall = now - this.lastAlphaVantageCall;\n      if (timeSinceLastCall < this.alphaVantageDelay) {\n        const waitTime = this.alphaVantageDelay - timeSinceLastCall;\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n      this.lastAlphaVantageCall = Date.now();\n    } else if (provider === 'coingecko') {\n      const timeSinceLastCall = now - this.lastCoinGeckoCall;\n      if (timeSinceLastCall < this.coinGeckoDelay) {\n        const waitTime = this.coinGeckoDelay - timeSinceLastCall;\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n      this.lastCoinGeckoCall = Date.now();\n    }\n  }\n\n  // Mock data generators\n  getMockStockPrice(symbol) {\n    const basePrice = 100 + Math.random() * 400; // $100-500\n    const change = (Math.random() - 0.5) * 10; // \u00B1$5\n    \n    return {\n      symbol: symbol.toUpperCase(),\n      price: parseFloat(basePrice.toFixed(2)),\n      change: parseFloat(change.toFixed(2)),\n      changePercent: parseFloat((change / basePrice * 100).toFixed(2)),\n      volume: Math.floor(Math.random() * 10000000),\n      lastUpdated: new Date(),\n      source: 'Mock Data',\n      assetType: 'STOCK'\n    };\n  }\n\n  getMockCryptoPrice(symbol) {\n    const basePrice = symbol === 'BTC' ? 45000 : symbol === 'ETH' ? 3000 : 1;\n    const change = (Math.random() - 0.5) * basePrice * 0.1; // \u00B110%\n    \n    return {\n      symbol: symbol.toUpperCase(),\n      price: parseFloat(basePrice.toFixed(2)),\n      change: parseFloat(change.toFixed(2)),\n      changePercent: parseFloat((change / basePrice * 100).toFixed(2)),\n      volume: Math.floor(Math.random() * 1000000),\n      lastUpdated: new Date(),\n      source: 'Mock Data',\n      assetType: 'CRYPTO'\n    };\n  }\n\n  // Cache management\n  async clearCache() {\n    return await this.cache.clearCache();\n  }\n\n  async getCacheStats() {\n    return await this.cache.getCacheStats();\n  }\n\n  // Health check\n  async healthCheck() {\n    const cacheHealth = await this.cache.healthCheck();\n    \n    return {\n      status: 'healthy',\n      cache: cacheHealth,\n      providers: {\n        alphaVantage: !!this.alphaVantageApiKey,\n        coinGecko: !!this.coinGeckoApiKey\n      },\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n", "// Portfolio handler for Cloudflare Workers (using D1 database and KV cache)\n\nimport { D1Database } from '../cloudflare/models/d1Database.js';\nimport { CloudflareEnhancedPriceService } from '../cloudflare/services/cloudflareEnhancedPriceService.js';\n\nexport async function portfolioHandler(request, env) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  try {\n    // Initialize services\n    const database = new D1Database(env.DB);\n    const priceService = new CloudflareEnhancedPriceService(env.PORTFOLIO_KV, env);\n    \n    if (request.method === 'GET') {\n      // Get portfolio data\n      const url = new URL(request.url);\n      const accountId = url.searchParams.get('accountId');\n      \n      let holdings;\n      if (accountId) {\n        holdings = await database.getHoldingsByAccountId(accountId);\n      } else {\n        holdings = await database.getAllHoldings();\n      }\n      \n      if (holdings.length === 0) {\n        return new Response(\n          JSON.stringify({\n            success: true,\n            data: {\n              summary: {\n                totalValue: 0,\n                totalGainLoss: 0,\n                totalGainLossPercent: 0,\n                currency: 'USD'\n              },\n              holdings: [],\n              lastUpdated: new Date().toISOString()\n            },\n            timestamp: new Date().toISOString(),\n            source: 'Cloudflare D1 + KV'\n          }),\n          {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      }\n      \n      // Get current prices for all holdings\n      const symbols = holdings.map(h => h.symbol);\n      const currentPrices = await priceService.getCurrentPrices(symbols);\n      \n      // Calculate portfolio with current prices\n      let totalValue = 0;\n      let totalCost = 0;\n      \n      const enrichedHoldings = holdings.map(holding => {\n        const currentPrice = currentPrices[holding.symbol.toUpperCase()];\n        const price = currentPrice ? currentPrice.price : holding.averagePrice;\n        const marketValue = holding.quantity * price;\n        const cost = holding.quantity * holding.averagePrice;\n        const gainLoss = marketValue - cost;\n        const gainLossPercent = cost > 0 ? (gainLoss / cost) * 100 : 0;\n        \n        totalValue += marketValue;\n        totalCost += cost;\n        \n        return {\n          id: holding.id,\n          accountId: holding.accountId,\n          accountName: holding.accountName,\n          symbol: holding.symbol,\n          name: currentPrice?.name || holding.symbol,\n          quantity: holding.quantity,\n          averagePrice: holding.averagePrice,\n          currentPrice: price,\n          marketValue: parseFloat(marketValue.toFixed(2)),\n          gainLoss: parseFloat(gainLoss.toFixed(2)),\n          gainLossPercent: parseFloat(gainLossPercent.toFixed(2)),\n          assetType: holding.assetType,\n          lastUpdated: currentPrice?.lastUpdated || holding.updatedAt,\n          priceSource: currentPrice?.source || 'No current price'\n        };\n      });\n      \n      const totalGainLoss = totalValue - totalCost;\n      const totalGainLossPercent = totalCost > 0 ? (totalGainLoss / totalCost) * 100 : 0;\n      \n      const portfolio = {\n        summary: {\n          totalValue: parseFloat(totalValue.toFixed(2)),\n          totalCost: parseFloat(totalCost.toFixed(2)),\n          totalGainLoss: parseFloat(totalGainLoss.toFixed(2)),\n          totalGainLossPercent: parseFloat(totalGainLossPercent.toFixed(2)),\n          currency: 'USD',\n          holdingsCount: holdings.length\n        },\n        holdings: enrichedHoldings,\n        lastUpdated: new Date().toISOString()\n      };\n      \n      return new Response(\n        JSON.stringify({\n          success: true,\n          data: portfolio,\n          timestamp: new Date().toISOString(),\n          source: 'Cloudflare D1 + KV'\n        }),\n        {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders,\n          },\n        }\n      );\n    }\n    \n    if (request.method === 'POST') {\n      // Add new holding\n      const holdingData = await request.json();\n      \n      // Validate required fields\n      if (!holdingData.accountId || !holdingData.symbol || !holdingData.quantity || !holdingData.averagePrice) {\n        return new Response(\n          JSON.stringify({ \n            error: 'Missing required fields: accountId, symbol, quantity, averagePrice' \n          }),\n          {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      }\n      \n      // Generate ID if not provided\n      if (!holdingData.id) {\n        holdingData.id = `holding-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      // Set defaults\n      holdingData.assetType = holdingData.assetType || 'STOCK';\n      \n      const success = await database.createHolding(holdingData);\n      \n      if (success) {\n        return new Response(\n          JSON.stringify({\n            success: true,\n            data: holdingData,\n            timestamp: new Date().toISOString(),\n            source: 'Cloudflare D1'\n          }),\n          {\n            status: 201,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      } else {\n        return new Response(\n          JSON.stringify({ error: 'Failed to create holding' }),\n          {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders,\n            },\n          }\n        );\n      }\n    }\n\n    // Method not allowed\n    return new Response(\n      JSON.stringify({ error: 'Method not allowed' }),\n      {\n        status: 405,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n\n  } catch (error) {\n    console.error('Error in portfolio handler:', error);\n    return new Response(\n      JSON.stringify({ \n        error: 'Internal server error',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n        },\n      }\n    );\n  }\n}\n", "// Cloudflare Workers entry point for Portfolio API\n\n// Import API handlers (Cloudflare Workers format)\nimport { healthHandler } from './handlers/health.js';\nimport { accountsHandler } from './handlers/accounts.js';\nimport { portfolioHandler } from './handlers/portfolio.js';\nimport { D1Database } from './cloudflare/models/d1Database.js';\n\n// CORS headers for all responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n};\n\n// Helper function to create responses with CORS\nfunction createResponse(data, status = 200, headers = {}) {\n  return new Response(\n    typeof data === 'string' ? data : JSON.stringify(data),\n    {\n      status,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders,\n        ...headers,\n      },\n    }\n  );\n}\n\n// Handle CORS preflight requests\nfunction handleOptions() {\n  return new Response(null, {\n    status: 200,\n    headers: corsHeaders,\n  });\n}\n\n// Main request handler\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const method = request.method;\n\n    // Handle CORS preflight\n    if (method === 'OPTIONS') {\n      return handleOptions();\n    }\n\n    try {\n      // Initialize database on first request (if needed)\n      if (env.DB) {\n        const database = new D1Database(env.DB);\n        // Initialize tables and ensure default account exists\n        ctx.waitUntil(Promise.resolve().then(async () => {\n          try {\n            await database.initializeTables();\n            await database.ensureDefaultAccount();\n          } catch (error) {\n            console.error('Database initialization error:', error);\n          }\n        }));\n      }\n      // Route API endpoints\n      if (path === '/api/health' || path === '/health') {\n        return await healthHandler(request, env);\n      }\n      \n      if (path === '/api/accounts' || path === '/accounts') {\n        return await accountsHandler(request, env);\n      }\n      \n      if (path === '/api/portfolio' || path === '/portfolio') {\n        return await portfolioHandler(request, env);\n      }\n\n      // Default route - API info\n      if (path === '/' || path === '/api') {\n        return createResponse({\n          name: 'Portfolio API',\n          version: '1.0.0',\n          environment: 'Cloudflare Workers',\n          endpoints: {\n            health: '/api/health',\n            accounts: '/api/accounts',\n            portfolio: '/api/portfolio'\n          },\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // 404 for unknown routes\n      return createResponse(\n        { error: 'Not Found', path },\n        404\n      );\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      return createResponse(\n        { \n          error: 'Internal Server Error', \n          message: error.message,\n          timestamp: new Date().toISOString()\n        },\n        500\n      );\n    }\n  },\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/luojiaxing/Code/cc-vision/apps/api/src/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/luojiaxing/Code/cc-vision/apps/api/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/luojiaxing/Code/cc-vision/apps/api/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/luojiaxing/Code/cc-vision/apps/api/src/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/luojiaxing/Code/cc-vision/apps/api/.wrangler/tmp/bundle-s9MFna/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/luojiaxing/Code/cc-vision/apps/api/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/luojiaxing/Code/cc-vision/apps/api/.wrangler/tmp/bundle-s9MFna/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/luojiaxing/Code/cc-vision/apps/api/.wrangler/tmp/bundle-s9MFna/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["corsHeaders", "corsHeaders", "corsHeaders"]
}
